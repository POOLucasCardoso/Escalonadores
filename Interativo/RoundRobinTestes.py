import unittest
from Escalonador import Escalonador
from EscalonadorV2 import Escalonador as EscalonadorV2

class EscalonadorIterativoTeste(unittest.TestCase):

	def test1(self):
		escalonador = Escalonador()
		resultados = str(escalonador).split('\n')
		self.assertEqual('Processos ativos: []',resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |',resultados[4])

	def test2(self):
		escalonador = Escalonador()
		try:
			escalonador.escalonar()
			resultados = str(escalonador).split('\n')
			self.assertEqual('Processos ativos: []',resultados[0])
			self.assertEqual('Processos bloqueados: []',resultados[1])
			self.assertEqual('Tick atual: 1',resultados[2])
			self.assertEqual('Quantun: 3',resultados[3])
			self.assertEqual('Histórico: |None|',resultados[4])
		except Exception as e:
			self.fail(str(e))

	def test3(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: None']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |',resultados[4])
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 1',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|',resultados[4])
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|',resultados[4])

	def test4(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|',resultados[4])

	def test5(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|',resultados[4])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p2|p2|p2|',resultados[4])

	def test6(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.addProcesso('p3')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w', 'Status p3: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: w', 'Status p3: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r', 'Status p3: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 9',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])

	def test7(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: None']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2')
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: None']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 9',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual(escalonador.pesquisarProcesso('p2').getEstados(),'wwwrrr')

	def test8(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.finalizarProcesso('p1')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual(escalonador.pesquisarProcesso('p2').getEstados(),'wr')

	def test9(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.finalizarProcesso('p2')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		self.assertEqual(escalonador.pesquisarProcesso('p1').getEstados(),'rrr')

	def test10(self):
		escalonador = Escalonador(5)
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 5',resultados[2])
		self.assertEqual('Quantun: 5',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p1|p1|',resultados[4])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 10',resultados[2])
		self.assertEqual('Quantun: 5',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p1|p1|p2|p2|p2|p2|p2|',resultados[4])

	def test11(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.finalizarProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r']",resultados[0])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Histórico: |p1|p1|None|None|p2|p2|',resultados[4])

	def test12(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.addProcesso('p3')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r', 'Status p3: w']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p1: b']",resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p3|p3|p3|p2|',resultados[4])

	def test13(self):
		escalonador = Escalonador()
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p3')
		escalonador.addProcesso('p2')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.desbloquearProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: r', 'Status p2: w', 'Status p1: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p2|p2|p2|p3|',resultados[4])

	def test14(self):
		escalonador = Escalonador(1)
		escalonador.addProcesso('p1')
		escalonador.addProcesso('p2')
		escalonador.addProcesso('p3')
		escalonador.bloquearProcesso()
		escalonador.bloquearProcesso()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.desbloquearProcesso('p2')
		escalonador.desbloquearProcesso('p1')
		escalonador.desbloquearProcesso('p3')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: w', 'Status p1: w', 'Status p3: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 4',resultados[2])
		self.assertEqual('Histórico: |None|p2|p1|p3|',resultados[4])

	def test15(self):
		escalonador = EscalonadorV2()
		try:
			escalonador.addProcesso('p1')
			self.fail("Exceção esperada")
		except Exception as e:
			resultados = str(escalonador).split('\n')
			self.assertEqual("Processos ativos: []",resultados[0])
			self.assertEqual("Processos bloqueados: []",resultados[1])
			self.assertEqual('Tick atual: 0',resultados[2])
			self.assertEqual('Quantun: 3',resultados[3])
			self.assertEqual('Histórico: |',resultados[4])

	def test16(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: None']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |',resultados[4])

	def test17(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.finalizarProcesso('p1')
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: []",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |',resultados[4])

	def test18(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|',resultados[4])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p2|p2|p2|',resultados[4])

	def test19(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.addProcesso('p3',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w', 'Status p3: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: w', 'Status p3: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r', 'Status p3: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 9',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])

	def test20(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: None']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2',1)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: None']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 9',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual(escalonador.pesquisarProcesso('p2').getEstados(),'wwwrrr')

	def test21(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.finalizarProcesso('p1')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual(escalonador.pesquisarProcesso('p2').getEstados(),'wr')

	def test22(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.finalizarProcesso('p2')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		escalonador.escalonar()
		self.assertEqual(escalonador.pesquisarProcesso('p1').getEstados(),'rrr')

	def test23(self):
		escalonador = EscalonadorV2(5)
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p2: w']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 5',resultados[2])
		self.assertEqual('Quantun: 5',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p1|p1|',resultados[4])
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual('Processos bloqueados: []',resultados[1])
		self.assertEqual('Tick atual: 10',resultados[2])
		self.assertEqual('Quantun: 5',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p1|p1|p1|p2|p2|p2|p2|p2|',resultados[4])

	def test24(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.finalizarProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r']",resultados[0])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Histórico: |p1|p1|None|None|p2|p2|',resultados[4])

	def test25(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.addProcesso('p3',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r', 'Status p3: w']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p1: b']",resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p3|p3|p3|p2|',resultados[4])

	def test26(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p3',1)
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.desbloquearProcesso('p1')
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: r', 'Status p2: w', 'Status p1: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])
		self.assertEqual('Histórico: |p1|p1|p2|p2|p2|p3|',resultados[4])

	def test27(self):
		escalonador = EscalonadorV2(1)
		escalonador.addProcesso('p1',1)
		escalonador.addProcesso('p2',1)
		escalonador.addProcesso('p3',1)
		escalonador.bloquearProcesso()
		escalonador.bloquearProcesso()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.desbloquearProcesso('p2')
		escalonador.desbloquearProcesso('p1')
		escalonador.desbloquearProcesso('p3')
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: w', 'Status p1: w', 'Status p3: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 4',resultados[2])
		self.assertEqual('Histórico: |None|p2|p1|p3|',resultados[4])

	def test28(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2',2)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 13',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])

	def test29(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',2)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: r']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p1: b']",resultados[1])
		self.assertEqual('Tick atual: 14',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])

	def test30(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',2)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.addProcesso('p2',1)
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.escalonar()
		escalonador.bloquearProcesso()
		escalonador.escalonar()
		escalonador.desbloquearProcesso('p1')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p2: w', 'Status p1: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 15',resultados[2])
		self.assertEqual('Quantun: 3',resultados[3])

	def test31(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',1)
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		escalonador.addProcesso('p2',2)
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w', 'Status p2: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		escalonador.finalizarProcesso('p2')
		escalonador.escalonar()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])

	def test33(self):
		escalonador = Escalonador()
		try:
			escalonador.addProcesso('p1',3)
			self.fail('Exceção esperada')
		except Exception:
			resultados = str(escalonador).split('\n')
			self.assertEqual('Processos ativos: []',resultados[0])
			self.assertEqual('Processos bloqueados: []',resultados[1])
			self.assertEqual('Tick atual: 0',resultados[2])
			self.assertEqual('Quantun: 3',resultados[3])
			self.assertEqual('Histórico: |',resultados[4])

	def test32(self):
		escalonador = EscalonadorV2()
		escalonador.addProcesso('p1',2)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: None']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 0',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 2',resultados[2])
		escalonador.addProcesso('p2',4)
		escalonador.escalonar()#escalonando
		escalonador.bloquearProcesso()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: w']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p2: r']",resultados[1])
		self.assertEqual('Tick atual: 3',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.addProcesso('p3',1)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p1: r', 'Status p3: None']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p2: b']",resultados[1])
		self.assertEqual('Tick atual: 5',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.bloquearProcesso()
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p2: b', 'Status p1: r']",resultados[1])
		self.assertEqual('Tick atual: 6',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.desbloquearProcesso('p2')
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: r', 'Status p2: b']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p1: b']",resultados[1])
		self.assertEqual('Tick atual: 7',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.desbloquearProcesso('p1')
		escalonador.addProcesso('p4',4)
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p2: r', 'Status p1: b', 'Status p4: None']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 8',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.addProcesso('p5',3)
		escalonador.addProcesso('p6',3)
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p2: r', 'Status p1: w', 'Status p4: w', 'Status p5: w', 'Status p6: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 20',resultados[2])
		escalonador.bloquearProcesso()
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p4: r', 'Status p5: w', 'Status p6: w']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p2: b']",resultados[1])
		self.assertEqual('Tick atual: 24',resultados[2])
		escalonador.desbloquearProcesso('p2')
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p4: r', 'Status p5: w', 'Status p6: w', 'Status p2: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 25',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p4: r', 'Status p5: w', 'Status p6: w', 'Status p2: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 30',resultados[2])
		escalonador.finalizarProcesso('p4')
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: w', 'Status p6: w', 'Status p2: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 31',resultados[2])
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: w', 'Status p6: w', 'Status p2: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 32',resultados[2])
		escalonador.finalizarProcesso('p2')
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: w', 'Status p6: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 33',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r', 'Status p6: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 36',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: w', 'Status p6: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 39',resultados[2])
		escalonador.bloquearProcesso()
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p6: b']",resultados[1])
		self.assertEqual('Tick atual: 40',resultados[2])
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p6: b']",resultados[1])
		self.assertEqual('Tick atual: 41',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r']",resultados[0])
		self.assertEqual("Processos bloqueados: ['Status p6: b']",resultados[1])
		self.assertEqual('Tick atual: 43',resultados[2])
		escalonador.escalonar()#escalonando
		escalonador.desbloquearProcesso('p6')
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r', 'Status p6: w']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 45',resultados[2])
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: w', 'Status p6: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 46',resultados[2])
		escalonador.finalizarProcesso('p6')
		escalonador.escalonar()#escalonando
		resultados = str(escalonador).split('\n')
		self.assertEqual("Processos ativos: ['Status p3: w', 'Status p1: w', 'Status p5: r']",resultados[0])
		self.assertEqual("Processos bloqueados: []",resultados[1])
		self.assertEqual('Tick atual: 47',resultados[2])

########################################################
if __name__ == '__main__':
	
	unittest.main()
